
authorize {
	preprocess
	chap
	mschap
	suffix
	
	eap {
		ok = return
	}
	
	unix
	
	sql{
	    notfound = 1
	    reject = 2
	}
	if(notfound){
        update reply {
            Reply-Message := "%{User-Name} ไม่มีอยู่ในระบบ กรุณาตรวจสอบอีกครั้ง"
        }
        ok = reject
	}
	
	if(reject){
        update reply {
            Reply-Message := "ล๊อกอินไม่สำเร็จ กรุณาตรวสอบ Username และ Password DEB"
        }
        ok = reject
	}
	
	expiration{
        userlock = 1
    }
    if(userlock){
            update reply {
                    Reply-Message := "%{User-Name} ของคุณหมดอายุการใช้งานแล้ว"
            }
            ok = reject
    }

	max_all_mb{
        reject = 1
    }
    if(reject){
            update reply {
                    Reply-Message := "%{User-Name} ใช้ข้อมูลครบตามที่กำหนดในแพ็คเจแล้ว"
            }
            ok = reject
    }
	
	noresetcounter{
        reject = 1
    }
    if(reject){
            update reply {
                    Reply-Message := "%{User-Name} ใช้เวลาครบตามที่กำหนดแล้ว"
            }
            ok = reject
    }

	expireonlogin{
        reject = 1
    }
    if(reject){
            update reply {
                    Reply-Message := "%{User-Name} หมดอายุการใช้งานแล้ว"
            }
            ok = reject
    }

	dailycounter{
        reject = 1
    }
    if(reject){
            update reply {
                    Reply-Message := "%{User-Name} ใช้ได้ไม่เกินที่กำหนดให้ใช้งานต่อวัน"
            }
            ok = reject
    }
	
	monthlycounter{
        reject = 1
    }
    if(reject){
            update reply {
                    Reply-Message := "%{User-Name} ใช้ได้ไม่เกินที่กำหนดให้ใช้งานต่อเดือน"
            }
            ok = reject
    }
	
	max_bytes_output{
        reject = 1
    }
    if(reject){
            update reply {
                    Reply-Message := "%{User-Name} ใช้งานได้ตามปริมาณข้อมูลที่กำหนดเท่านั้น"
            }
            ok = reject
    }
	
	max_bytes_input{
        reject = 1
    }
    if(reject){
            update reply {
                    Reply-Message := "%{User-Name} ใช้งานได้ตามปริมาณข้อมูลที่กำหนดเท่านั้น"
            }
            ok = reject
    }

	logintime{
        reject = 1
    }
    if(reject){
            update reply {
                    Reply-Message := "%{User-Name} ใช้งานได้ตามเวลาที่กำหนดเท่านั้น"
            }
            ok = reject
    }
	
	mb_per_days{
        reject = 1
    }
    if(reject){
            update reply {
                    Reply-Message := "%{User-Name} ใช้ข้อมูลครบกำหนดต่อวันแล้ว"
            }
            ok = reject
    }
	
	mb_per_month{
        reject = 1
    }
    if(reject){
            update reply {
                    Reply-Message := "%{User-Name} ใช้ข้อมูลครบกำหนดต่อเดือนแล้ว"
            }
            ok = reject
    }

	pap

}


#  Authentication.
#
#
#  This section lists which modules are available for authentication.
#  Note that it does NOT mean 'try each module in order'.  It means
#  that a module from the 'authorize' section adds a configuration
#  attribute 'Auth-Type := FOO'.  That authentication type is then
#  used to pick the apropriate module from the list below.
#

#  In general, you SHOULD NOT set the Auth-Type attribute.  The server
#  will figure it out on its own, and will do the right thing.  The
#  most common side effect of erroneously setting the Auth-Type
#  attribute is that one authentication method will work, but the
#  others will not.
#
#  The common reasons to set the Auth-Type attribute by hand
#  is to either forcibly reject the user (Auth-Type := Reject),
#  or to or forcibly accept the user (Auth-Type := Accept).
#
#  Note that Auth-Type := Accept will NOT work with EAP.
#
#  Please do not put "unlang" configurations into the "authenticate"
#  section.  Put them in the "post-auth" section instead.  That's what
#  the post-auth section is for.
#
authenticate {
	#
	#  PAP authentication, when a back-end database listed
	#  in the 'authorize' section supplies a password.  The
	#  password can be clear-text, or encrypted.
	Auth-Type PAP {
		pap
	}

	#
	#  Most people want CHAP authentication
	#  A back-end database listed in the 'authorize' section
	#  MUST supply a CLEAR TEXT password.  Encrypted passwords
	#  won't work.
	Auth-Type CHAP {
		chap
	}

	#
	#  MSCHAP authentication.
	Auth-Type MS-CHAP {
		mschap
	}

	#
	#  If you have a Cisco SIP server authenticating against
	#  FreeRADIUS, uncomment the following line, and the 'digest'
	#  line in the 'authorize' section.
#	digest

	#
	#  Pluggable Authentication Modules.
#	pam

	#
	#  See 'man getpwent' for information on how the 'unix'
	#  module checks the users password.  Note that packets
	#  containing CHAP-Password attributes CANNOT be authenticated
	#  against /etc/passwd!  See the FAQ for details.
	#  
	unix

	# Uncomment it if you want to use ldap for authentication
	#
	# Note that this means "check plain-text password against
	# the ldap database", which means that EAP won't work,
	# as it does not supply a plain-text password.
#	Auth-Type LDAP {
#		ldap
#	}

	#
	#  Allow EAP authentication.
	eap

	#
	#  The older configurations sent a number of attributes in
	#  Access-Challenge packets, which wasn't strictly correct.
	#  If you want to filter out these attributes, uncomment
	#  the following lines.
	#
#	Auth-Type eap {
#		eap {
#			handled = 1  
#		}
#		if (handled && (Response-Packet-Type == Access-Challenge)) {
#			attr_filter.access_challenge.post-auth
#			handled  # override the "updated" code from attr_filter
#		}
#	}
}


#
#  Pre-accounting.  Decide which accounting type to use.
#
preacct {
	preprocess

	#
	#  Session start times are *implied* in RADIUS.
	#  The NAS never sends a "start time".  Instead, it sends
	#  a start packet, *possibly* with an Acct-Delay-Time.
	#  The server is supposed to conclude that the start time
	#  was "Acct-Delay-Time" seconds in the past.
	#
	#  The code below creates an explicit start time, which can
	#  then be used in other modules.
	#
	#  The start time is: NOW - delay - session_length
	#

#	  update request {
#	  	FreeRADIUS-Acct-Session-Start-Time = "%{expr: %l - %{%{Acct-Session-Time}:-0} - %{%{Acct-Delay-Time}:-0}}"
#	}


	#
	#  Ensure that we have a semi-unique identifier for every
	#  request, and many NAS boxes are broken.
	acct_unique

	#
	#  Look for IPASS-style 'realm/', and if not found, look for
	#  '@realm', and decide whether or not to proxy, based on
	#  that.
	#
	#  Accounting requests are generally proxied to the same
	#  home server as authentication requests.
#	IPASS
	suffix
#	ntdomain

	#
	#  Read the 'acct_users' file
#	files
}

#
#  Accounting.  Log the accounting data.
#
accounting {
	#
	#  Create a 'detail'ed log of the packets.
	#  Note that accounting requests which are proxied
	#  are also logged in the detail file.
	detail
#	daily

	#  Update the wtmp file
	#
	#  If you don't use "radlast", you can delete this line.
	unix

	#
	#  For Simultaneous-Use tracking.
	#
	#  Due to packet losses in the network, the data here
	#  may be incorrect.  There is little we can do about it.
	# radutmp
	# sradutmp

	#  Return an address to the IP Pool when we see a stop record.
#	main_pool

	#
	#  Log traffic to an SQL database.
	#
	#  See "Accounting queries" in sql.conf
	sql

	#
	#  If you receive stop packets with zero session length,
	#  they will NOT be logged in the database.  The SQL module
	#  will print a message (only in debugging mode), and will
	#  return "noop".
	#
	#  You can ignore these packets by uncommenting the following
	#  three lines.  Otherwise, the server will not respond to the
	#  accounting request, and the NAS will retransmit.
	#
#	if (noop) {
#		ok
#	}

	#
	#  Instead of sending the query to the SQL server,
	#  write it into a log file.
	#
#	sql_log

	#  Cisco VoIP specific bulk accounting
#	pgsql-voip

	#  Filter attributes from the accounting response.
	attr_filter.accounting_response

	#
	#  See "Autz-Type Status-Server" for how this works.
	#
#	Acct-Type Status-Server {
#
#	}
}


#  Session database, used for checking Simultaneous-Use. Either the radutmp 
#  or rlm_sql module can handle this.
#  The rlm_sql module is *much* faster
session {
	#radutmp

	#
	#  See "Simultaneous Use Checking Queries" in sql.conf
	sql
}


#  Post-Authentication
#  Once we KNOW that the user has been authenticated, there are
#  additional steps we can take.
post-auth {
	sql
	exec
	Post-Auth-Type REJECT {
        update reply { # Fallback error message
            Reply-Message = "ล๊อกอินไม่สำเร็จ กรุณาตรวสอบ Username และ Password อีกครั้ง"
        }
		attr_filter.access_reject
	}
}

#
#  When the server decides to proxy a request to a home server,
#  the proxied request is first passed through the pre-proxy
#  stage.  This stage can re-write the request, or decide to
#  cancel the proxy.
#
#  Only a few modules currently have this method.
#
pre-proxy {
#	attr_rewrite

	#  Uncomment the following line if you want to change attributes
	#  as defined in the preproxy_users file.
#	files

	#  Uncomment the following line if you want to filter requests
	#  sent to remote servers based on the rules defined in the
	#  'attrs.pre-proxy' file.
#	attr_filter.pre-proxy

	#  If you want to have a log of packets proxied to a home
	#  server, un-comment the following line, and the
	#  'detail pre_proxy_log' section, above.
#	pre_proxy_log
}

#
#  When the server receives a reply to a request it proxied
#  to a home server, the request may be massaged here, in the
#  post-proxy stage.
#
post-proxy {

	#  If you want to have a log of replies from a home server,
	#  un-comment the following line, and the 'detail post_proxy_log'
	#  section, above.
#	post_proxy_log

#	attr_rewrite

	#  Uncomment the following line if you want to filter replies from
	#  remote proxies based on the rules defined in the 'attrs' file.
#	attr_filter.post-proxy

	#
	#  If you are proxying LEAP, you MUST configure the EAP
	#  module, and you MUST list it here, in the post-proxy
	#  stage.
	#
	#  You MUST also use the 'nostrip' option in the 'realm'
	#  configuration.  Otherwise, the User-Name attribute
	#  in the proxied request will not match the user name
	#  hidden inside of the EAP packet, and the end server will
	#  reject the EAP request.
	#
	eap

	#
	#  If the server tries to proxy a request and fails, then the
	#  request is processed through the modules in this section.
	#
	#  The main use of this section is to permit robust proxying
	#  of accounting packets.  The server can be configured to
	#  proxy accounting packets as part of normal processing.
	#  Then, if the home server goes down, accounting packets can
	#  be logged to a local "detail" file, for processing with
	#  radrelay.  When the home server comes back up, radrelay
	#  will read the detail file, and send the packets to the
	#  home server.
	#
	#  With this configuration, the server always responds to
	#  Accounting-Requests from the NAS, but only writes
	#  accounting packets to disk if the home server is down.
	#
#	Post-Proxy-Type Fail {
#			detail
#	}

}

